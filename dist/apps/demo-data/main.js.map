{"version":3,"file":"main.js","mappings":"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","sources":["webpack://imerss/./libs/inat-components-utils/src/index.ts","webpack://imerss/./libs/inat-components-utils/src/lib/inat-components-utils.ts","webpack://imerss/./libs/shared/src/constants.ts","webpack://imerss/./libs/shared/src/index.ts","webpack://imerss/./libs/shared/src/lib/api/common-taxa.ts","webpack://imerss/./libs/shared/src/lib/api/favourites.ts","webpack://imerss/./libs/shared/src/lib/api/index.ts","webpack://imerss/./libs/shared/src/lib/api/recent-observations.ts","webpack://imerss/./libs/shared/src/lib/api/summary.ts","webpack://imerss/./libs/shared/src/lib/utils/config-utils.ts","webpack://imerss/./libs/shared/src/lib/utils/date-utils.ts","webpack://imerss/./libs/shared/src/lib/utils/index.ts","webpack://imerss/./libs/shared/src/lib/utils/number-utils.ts","webpack://imerss/./libs/shared/src/typings.ts","webpack://imerss/external commonjs \"cli-progress\"","webpack://imerss/external commonjs \"date-fns\"","webpack://imerss/external commonjs \"sleep-promise\"","webpack://imerss/external commonjs \"tslib\"","webpack://imerss/external node-commonjs \"fs\"","webpack://imerss/external node-commonjs \"path\"","webpack://imerss/webpack/bootstrap","webpack://imerss/./apps/demo-data/src/main.ts"],"sourcesContent":["import process from './lib/inat-components-utils';\n\nexport default process;\n","import fs from \"fs\";\nimport sleep from \"sleep-promise\";\nimport cliProgress from \"cli-progress\";\n\nimport {BaseComponentProps, ConfigFile, Feature, PlaceConfig, TaxaConfig} from \"@imerss/shared\";\nimport { getRecentObservations, getCommonTaxa, getFavourites, getSummary } from \"@imerss/shared/api\";\nimport { getCurrentYear, getSourceFile } from \"@imerss/shared/utils\";\n\nexport const getConfigurations = (config: ConfigFile): BaseComponentProps[] => {\n    const configurations: any = [];\n\n    config.taxa.forEach((taxonInfo: TaxaConfig) => {\n        config.places.forEach((placeInfo: PlaceConfig) => {\n            const currentYear = getCurrentYear();\n\n            // ------------------------------------------------------------------------------------\n            // Recent observations\n            configurations.push({\n                api: Feature.recentObservations,\n                perPage: 100,\n                taxonId: taxonInfo.taxonId,\n                placeId: placeInfo.placeId,\n                filename: getSourceFile(Feature.recentObservations, taxonInfo, placeInfo)\n            });\n\n            // ------------------------------------------------------------------------------------\n            // Common taxa. For this, generate the last 10 years of info plus one for all years\n            const baseCommonTaxaData = {\n                api: Feature.commonTaxa,\n                perPage: 100,\n                taxonId: taxonInfo.taxonId,\n                placeId: placeInfo.placeId,\n                filename: getSourceFile(Feature.commonTaxa, taxonInfo, placeInfo, \"all\")\n            };\n\n            configurations.push({\n                ...baseCommonTaxaData,\n                year: \"all\"\n            })\n\n            for (let year = currentYear - 10; year <= currentYear; year++) {\n                configurations.push({\n                    ...baseCommonTaxaData,\n                    filename: getSourceFile(Feature.commonTaxa, taxonInfo, placeInfo, year),\n                    year\n                });\n            }\n\n            // ------------------------------------------------------------------------------------\n            // Favourites. For this, generate the last 10 years of info plus one for all years\n            const baseFavouritesData = {\n                api: Feature.favourites,\n                perPage: 100,\n                taxonId: taxonInfo.taxonId,\n                placeId: placeInfo.placeId,\n                filename: getSourceFile(Feature.favourites, taxonInfo, placeInfo, \"all\")\n            };\n\n            configurations.push({\n                ...baseFavouritesData,\n                year: \"all\"\n            })\n\n            for (let year = currentYear - 10; year <= currentYear; year++) {\n                configurations.push({\n                    ...baseFavouritesData,\n                    filename: getSourceFile(Feature.favourites, taxonInfo, placeInfo, year),\n                    year\n                });\n            }\n\n            // ------------------------------------------------------------------------------------\n            // Stats\n            const baseStatsData = {\n                api: Feature.stats,\n                taxonId: taxonInfo.taxonId,\n                placeId: placeInfo.placeId,\n                filename: getSourceFile(Feature.stats, taxonInfo, placeInfo, \"all\")\n            };\n\n            configurations.push({\n                ...baseStatsData,\n                year: \"all\"\n            });\n\n            for (let year = currentYear - 10; year <= currentYear; year++) {\n                configurations.push({\n                    ...baseStatsData,\n                    filename: getSourceFile(Feature.stats, taxonInfo, placeInfo, year),\n                    year\n                });\n            }\n        });\n    });\n\n    return configurations;\n};\n\nconst generateFile = async (config, folder) => {\n    let data;\n    if (config.api === Feature.recentObservations) {\n        data = await getRecentObservations({\n            taxonId: config.taxonId,\n            placeId: config.placeId,\n            perPage: config.perPage\n        });\n    } else if (config.api === Feature.commonTaxa) {\n        data = await getCommonTaxa({\n            taxonId: config.taxonId,\n            placeId: config.placeId,\n            perPage: config.perPage,\n            year: config.year as string\n        });\n    } else if (config.api === Feature.favourites) {\n        data = await getFavourites({\n            taxonId: config.taxonId,\n            placeId: config.placeId,\n            perPage: config.perPage,\n            year: config.year as string\n        });\n    } else if (config.api === Feature.stats) {\n        data = await getSummary({\n            taxonId: config.taxonId,\n            placeId: config.placeId,\n            year: config.year as string\n        });\n    }\n\n    const filename = config.filename;\n    const filenameWithPath = `${folder}/${filename}`;\n    const content = config.minify ? JSON.stringify(data) : JSON.stringify(data, null, \"\\t\");\n\n    if (fs.existsSync(filenameWithPath)) {\n        fs.unlinkSync(filenameWithPath);\n    }\n    fs.writeFileSync(filenameWithPath, content);\n};\n\nconst process = async (config: ConfigFile, folder: string) => {\n    let currentIndex = 0;\n    const loadingBar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);\n\n    const processQueue = async () => {\n        await generateFile(queue[currentIndex], folder);\n        loadingBar.update(currentIndex);\n        currentIndex++;\n        await sleep(1000);\n\n        if (currentIndex < queue.length) {\n            await processQueue();\n        } else {\n            loadingBar.stop();\n        }\n    };\n\n    const queue = getConfigurations(config);\n    loadingBar.start(queue.length, 0);\n\n    await processQueue();\n}\n\nexport default process;","export const BASE_API_URL = 'https://api.inaturalist.org';\nexport const PER_PAGE = 100;\nexport const BASE_URL = \"https://www.inaturalist.org\"; // /people/name_here\n","export * from \"./typings\";\nexport * as C from \"./constants\";\n","import * as C from \"../../constants\";\n\nexport type CommonTaxaCallProps = {\n    year: string | number;\n    taxonId: string | number;\n    placeId: string | number;\n    perPage: number;\n};\n\nexport type CommonTaxData = {\n    id: number;\n    imageUrl: string;\n    taxonName: string;\n    taxonCommonName: string;\n    obsCount: number;\n}\n\nexport type CommonTaxaRespData = {\n    totalResults: number;\n    results: [CommonTaxData]\n}\n\nexport const getCommonTaxa = async ({ year, taxonId, placeId, perPage }: CommonTaxaCallProps): Promise<CommonTaxaRespData> => {\n    let url = `${C.BASE_API_URL}/v1/observations/species_counts?verifiable=true&spam=false&place_id=${placeId}&taxon_id=${taxonId}&locale=en-US&per_page=${perPage}`;\n    if (year !== \"all\") {\n        url += `&d1=${year}-01-01&d2=${year}-12-31`;\n    }\n\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json'\n        }\n    });\n\n    const resp = await response.json();\n    const sortedTaxa = resp.results.sort((a: any, b: any) => {\n        if (a.count > b.count) {\n            return -1;\n        } else if (a.count < b.count) {\n            return 1;\n        }\n        return 0;\n    });\n\n    return {\n        totalResults: resp.total_results,\n        results: sortedTaxa.map((row: any) => ({\n            id: row.taxon.id,\n            imageUrl: row.taxon?.default_photo?.square_url || \"\",\n            obsCount: row.count,\n            taxonName: row.taxon.name || \"\",\n            taxonCommonName: row.taxon.preferred_common_name\n        }))\n    };\n};\n","import * as C from \"../../constants\";\n\nexport type FavouritesCallProps = {\n    year: string | number;\n    taxonId: string | number;\n    placeId: string | number;\n    perPage: number;\n};\n\nexport type FavouritesData = {\n    id: number;\n    imageUrl: string;\n    taxonName: string;\n    taxonCommonName: string;\n    obsDate: string;\n    obsCount: number;\n    observerUsername: string;\n    numFaves: number;\n}\n\nexport type FavouritesRespData = {\n    totalResults: number;\n    results: [FavouritesData]\n}\n\nexport const getFavourites = async ({ year, taxonId, placeId, perPage }: FavouritesCallProps): Promise<FavouritesRespData> => {\n    let url = `${C.BASE_API_URL}/v1/observations?verifiable=true&order_by=votes&order=desc&page=1&spam=false&place_id=${placeId}&taxon_id=${taxonId}&locale=en-US&per_page=${perPage}`;\n    if (year !== \"all\") {\n        url += `&d1=${year}-01-01&d2=${year}-12-31`;\n    }\n\n    const response = await fetch(url, {\n        // method: 'GET',\n        // headers: {\n        //     Accept: 'application/json'\n        // }\n    });\n\n    const resp = await response.json();\n    const sortedTaxa = resp.results.filter((i: any) => i.faves.length > 0).sort((a: any, b: any) => {\n        if (a.faves.length > b.faves.length) {\n            return -1;\n        } else if (a.faves.length < b.faves.length) {\n            return 1;\n        }\n        return 0;\n    });\n\n    return {\n        totalResults: resp.total_results,\n        results: sortedTaxa.map((row: any) => ({\n            id: row.id,\n            imageUrl: row.taxon?.default_photo?.square_url || \"\",\n            obsDate: row.observed_on_string,\n            obsUrl: row.uri,\n            taxonName: row.taxon.name || \"\",\n            taxonCommonName: row.taxon.preferred_common_name,\n            numFaves: row.faves.length\n        }))\n    };\n};\n","export * from \"./common-taxa\";\nexport * from \"./favourites\";\nexport * from \"./recent-observations\";\nexport * from \"./summary\";\n","import { C } from \"@imerss/shared\";\n\nexport type RecentObservationsCallProps = {\n    taxonId: string | number;\n    placeId: string | number;\n    perPage: number;\n};\n\nexport type RecentObservationData = {\n    id: number;\n    imageUrl: string;\n    obsUrl: string;\n    obsDate: string;\n    taxonName: string;\n    taxonCommonName: string;\n    observerUsername: string;\n}\n\nexport type RecentObservationsRespData = {\n    totalResults: number;\n    results: [RecentObservationData]\n}\n\nexport const getRecentObservations = async ({ taxonId, placeId, perPage }: RecentObservationsCallProps): Promise<RecentObservationsRespData> => {\n    const url = `${C.BASE_API_URL}/v1/observations?photos=true&per_page=${perPage}&taxon_id=${taxonId}&place_id=${placeId}&order=desc&order_by=observed_on`;\n    const response = await fetch(url);\n    const obs = await response.json();\n\n    return {\n        totalResults: obs.total_results,\n        results: obs.results.map((obs: any) => {\n            return {\n                id: obs.id,\n                imageUrl: obs.observation_photos[0].photo.url,\n                obsUrl: obs.uri,\n                obsDate: obs.observed_on_string,\n                taxonName: obs?.taxon?.name || \"\",\n                taxonCommonName: obs?.taxon.preferred_common_name,\n                observerUsername: obs.user.login\n            }\n        })\n    };\n};\n","import * as C from '../../constants';\n\nexport type SummaryApiProps = {\n    taxonId: number;\n    placeId: number;\n    year: string | number;\n}\n\nexport const getSummary = async ({ taxonId, placeId, year }: SummaryApiProps): Promise<any> => {\n    const observers = await getObserverSummary(taxonId, placeId, year);\n    const observations = await getObservationSummary(taxonId, placeId, year);\n    const seasonalityData = await getSeasonalityData(taxonId, placeId, year);\n\n    return {\n        observers,\n        observations,\n        seasonalityData\n    };\n};\n\nexport type Observer = {\n    id: number;\n    userName: string;\n    numObservations: number;\n    iconUrl: string | null;\n}\nexport type SummaryData = {\n    totalCount: number;\n    top: [Observer];\n}\n\nexport const getObserverSummary = async (taxonId: number, placeId: number, year: string | number): Promise<SummaryData> => {\n    let url = `${C.BASE_API_URL}/v1/observations/observers?verifiable=true&order_by=votes&order=desc&page=1&spam=false&place_id=${placeId}&taxon_id=${taxonId}&locale=en-US&per_page=10`;\n    if (year !== \"all\") {\n        url += `&d1=${year}-01-01&d2=${year}-12-31`;\n    }\n\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return {\n        totalCount: data.total_results,\n        top: data.results.map((result: any) => ({\n            id: result.user.id,\n            userName: result.user.login,\n            numObservations: result.observation_count,\n            iconUrl: result.user.icon_url\n        }))\n    };\n};\n\nexport const getObservationSummary = async(taxonId: number, placeId: number, year: string | number) => {\n    let url = `${C.BASE_API_URL}/v1/observations?photos=true&per_page=1&taxon_id=${taxonId}&place_id=${placeId}&order=desc&order_by=observed_on`;\n    if (year !== \"all\") {\n        url += `&d1=${year}-01-01&d2=${year}-12-31`;\n    }\n\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return {\n        totalCount: data.total_results\n    };\n}\n\nexport type SeasonalityData = {\n    monthOfYear: {\n        [monthNum: string]: number\n    }\n}\n\nexport const getSeasonalityData = async (taxonId: number, placeId: number, year: string | number): Promise<SeasonalityData> => {\n    let url = `${C.BASE_API_URL}/v1/observations/histogram?verifiable=true&taxon_id=${taxonId}&place_id=${placeId}&locale=en-US&date_field=observed&interval=month_of_year`;\n    if (year !== \"all\") {\n        url += `&d1=${year}-01-01&d2=${year}-12-31`;\n    }\n\n    const response = await fetch(url);\n    const resp = await response.json();\n\n    return {\n        monthOfYear: resp.results.month_of_year\n    };\n};\n","import {Feature, PlaceConfig, TaxaConfig} from \"../../typings\";\n\n/*\n * Right now the generated source filenames aren't configurable.\n */\nexport const getSourceFile = (api: Feature, taxonInfo: TaxaConfig, placeInfo: PlaceConfig, year?: string | number): string => {\n\tconst yearStr = year === \"all\" ? \"allyears\" : year;\n\n\tlet filename = \"\";\n\tif (api === Feature.recentObservations) {\n\t\tfilename = `${taxonInfo.short}-${placeInfo.short}-recent.json`;\n\t} else if (api === Feature.commonTaxa) {\n\t\tfilename = `${taxonInfo.short}-${placeInfo.short}-${yearStr}-commonTaxa.json`;\n\t} else if (api === Feature.favourites) {\n\t\tfilename = `${taxonInfo.short}-${placeInfo.short}-${yearStr}-favourites.json`;\n\t} else if (api === Feature.stats) {\n\t\tfilename = `${taxonInfo.short}-${placeInfo.short}-${yearStr}-stats.json`;\n\t}\n\n\treturn filename;\n};\n","import {format} from \"date-fns\";\n\nexport const getCurrentYear = () => new Date().getFullYear();\n\n// not 100% this shows the date in the right timezone, but it's fine for BC\nexport const formatDate = (date: string, dateFormat = \"MMM do, h:mm b\"): any => {\n  let formattedDate = \"\";\n  try {\n    formattedDate = format(Date.parse(date), dateFormat);\n  } catch (e) {\n    console.log(\"Failed to parse date: \", date);\n  }\n  return formattedDate;\n}\n","export * from \"./config-utils\";\nexport * from \"./date-utils\";\nexport * from \"./number-utils\";\n","export const numberWithCommas = (x: number) => (x || 0).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n","export type ConfigFile = {\n\ttaxa: TaxaConfig[];\n\tplaces: PlaceConfig[];\n\tfeatures: {\n\t\t[Feature.commonTaxa]?: {\n\t\t\tnumResults?: number;\n\t\t};\n\t\t[Feature.favourites]?: {\n\t\t\tnumResults?: number;\n\t\t\tnumYears?: number;\n\t\t};\n\t\t[Feature.recentObservations]?: {\n\t\t\tnumResults?: number;\n\t\t\tnumYears?: number;\n\t\t};\n\t\t[Feature.stats]?: {\n\t\t\tnumTopObservers?: number;\n\t\t};\n\t}\n}\n\nexport enum DataSource {\n\tautoLoad = \"autoLoad\",\n\tdataProp = \"dataProp\",\n\turl = \"url\"\n}\n\nexport enum Feature {\n\tcommonTaxa = \"commonTaxa\",\n\tfavourites = \"favourites\",\n\trecentObservations = \"recentObservations\",\n\tstats = \"stats\"\n}\n\n// I know this is duplicated, but it's very possible they could be different in future\nexport enum Tab {\n\trecent = \"recent\",\n\tcommonTaxa = \"commonTaxa\",\n\tfavourites = \"favourites\",\n\tstats = \"stats\"\n}\n\n// TODO investigate conditional types here & drop the optionals. It's pretty darn vague.\nexport type BaseComponentProps = {\n\ttaxonId?: number;\n\tplaceId?: number;\n\tfilename?: string;\n\tperPage?: number;\n\tsource?: DataSource;\n\tdata?: any;\n\tdataUrl?: string;\n\tclassName?: string;\n\tcomponents?: {\n\t\tlabel?: any;\n\t\terror?: any;\n\t\tloader?: any;\n\t};\n};\n\nexport type TaxaConfig = {\n\tlabel: string;\n\tshort: string;\n\ttaxonId: number;\n}\n\nexport type PlaceConfig = {\n\tlabel: string;\n\tshort: string;\n\tplaceId: number;\n}","module.exports = require(\"cli-progress\");","module.exports = require(\"date-fns\");","module.exports = require(\"sleep-promise\");","module.exports = require(\"tslib\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import path from \"path\";\nimport generate from \"@imerss/inat-components-utils\";\nimport config from \"../../inat.config.json\";\n\n(async () => {\n\tconst folder = path.resolve(__dirname, \"../files\");\n\tawait generate(config, folder);\n})();"],"names":[],"sourceRoot":""}